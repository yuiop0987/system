import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

def sigmoid(z):
    return 1.0 / (1.0 + np.exp(-z))

def logisticregression(X, y, iterations, learning_rate):
    weights = np.zeros(X.shape[1])
    for _ in range(iterations):
        z = np.dot(X, weights)
        predicted = sigmoid(z)
        grad = np.dot(X.T, (predicted - y)) / y.shape[0]
        weights -= learning_rate * grad
    return weights

diabetesdata = pd.read_csv('diabetes.csv')
X = diabetesdata.drop('Outcome', axis=1).values
y = diabetesdata['Outcome'].values

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.4, random_state=9)

Xtrainscaled = StandardScaler().fit_transform(Xtrain)
Xtestscaled = StandardScaler().fit_transform(Xtest)


customweights = logisticregression(Xtrainscaled, ytrain, iterations=200, learning_rate=0.1)

zcustom = np.dot(Xtestscaled, customweights)
predictedcustom = sigmoid(zcustom) > 0.5

accuracycustom = np.mean(predictedcustom == ytest)
print('Custom Model Accuracy:', accuracycustom)

lrmodel = LogisticRegression().fit(Xtrainscaled, ytrain)
accuracy = lrmodel.score(Xtestscaled, ytest)
print('Scikit Accuracy:', accuracy)
