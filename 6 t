import pandas as pd

class NaiveBayesClassifier:    
    def __init__(self, features, labels):      
        self.features, self.labels = features, labels         
        self.N = len(self.features) 
        self.dim = len(self.features[0]) 
        self.attrs = [[] for _ in range(self.dim)] 
        self.output_domain = {} 
        self.data = []           
        for i in range(len(self.features)):
            for j in range(self.dim):        
                if not self.features[i][j] in self.attrs[j]:
                    self.attrs[j].append(self.features[i][j])
            if not self.labels[i] in self.output_domain.keys():
                self.output_domain[self.labels[i]] = 1         
            else:
                self.output_domain[self.labels[i]] += 1          
            self.data.append([self.features[i], self.labels[i]])            
    def classify(self, entry):
        result = None 
        max_probability = -1 
        for label in self.output_domain.keys():
            probability = self.output_domain[label] / self.N
            for i in range(self.dim):
                cases = [x for x in self.data if x[0][i] == entry[i] and x[1] == label] 
                n = len(cases)
                probability *= n / self.N      
            if probability > max_probability:
                max_probability = probability
                result = label
        return result      

def convert_labels(value):
    return 'yes' if value == 1 else 'no'
data = pd.read_csv('titanic.csv')
print(data.head())
labels = data['survived'].apply(convert_labels)
features = data[['Age', 'Sex', 'Name','Fare']].values.tolist()
# features_array = features.values
naive_bayes = NaiveBayesClassifier(features, labels)
entry_to_classify = [6, 148, 72, 35, 0, 33.6, 0.627, 50]
classification_result = naive_bayes.classify(entry_to_classify)
print("Classification result:", classification_result)

