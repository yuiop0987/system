import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class KMeans:
    def _init_(self, n_clusters, max_iters=100):
        self.n_clusters = n_clusters
        self.max_iters = max_iters

    def fit(self, X):
        self.centroids = X[np.random.choice(X.shape[0], self.n_clusters, replace=False)]
        
        for _ in range(self.max_iters):
            labels = self._assign_labels(X)
            
            new_centroids = self._update_centroids(X, labels)
            
            if np.all(self.centroids == new_centroids):
                break
                
            self.centroids = new_centroids

    def _assign_labels(self, X):
        distances = np.linalg.norm(X[:, np.newaxis] - self.centroids, axis=2)
        
        return np.argmin(distances, axis=1)
    
    def _update_centroids(self, X, labels):
        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(self.n_clusters)])
        return new_centroids

# Load dataset
data = pd.read_csv('titanic.csv')

# Display the columns in the dataset
print("Columns in the dataset:", data.columns)

# Drop 'Name', 'Sex', and 'Survived' columns if they exist

X = data.drop(['Name', 'Sex', 'Survived'], axis=1).values

# Initialize KMeans object
kmeans = KMeans(n_clusters=3)

# Fit KMeans model to data
kmeans.fit(X)

# Assign labels to each data point
labels = kmeans._assign_labels(X)

# Print cluster assignments and final centroids
print("Cluster Assignments:", labels)
print("Final Centroids:", kmeans.centroids)

# Plotting
plt.scatter(X[:, 0], X[:, 1], c=labels)

plt.scatter(kmeans.centroids[:, 0], kmeans.centroids[:, 1], c='red', marker='x',label='Centroids')

plt.title('K-Means Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')

plt.show()
