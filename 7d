#KNN on Diabetes Dataset


import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# Define a simple KNN classifier
class KNN:
    def __init__(self, neighbors):
        self.neighbors = neighbors

    # Train the model
    def train(self, features, target):
        self.features = features
        self.target = target

    # Make predictions
    def predict(self, test_features):
        predictions = []
        for test_feature in test_features:
            distances = np.sqrt(np.sum(np.square(self.features - test_feature), axis=1))
            nearest_neighbors = self.target[np.argsort(distances)[:self.neighbors]]
            predictions.append(np.bincount(nearest_neighbors).argmax())
        return np.array(predictions)

def main():
    # Load the diabetes dataset
    diabetesdata = pd.read_csv("diabetes.csv")
    
    # Separate features (X) and target (y)
    X = diabetesdata.drop(columns=["Outcome"]).values
    y = diabetesdata["Outcome"].values

    # Split dataset into train and test sets
    Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.33, random_state=42)
    
    # Train and evaluate the custom KNN model
    customknn = KNN(neighbors=3)
    customknn.train(Xtrain, ytrain)
    customaccuracy = sum(customknn.predict(Xtest) == ytest) / len(ytest) * 100

    # Train and evaluate the scikit-learn KNN model
    sklearnknn = KNeighborsClassifier(n_neighbors=3)
    sklearnknn.fit(Xtrain, ytrain)
    sklearnaccuracy = sklearnknn.score(Xtest, ytest) * 100
    
    # Print accuracies
    print(f"Accuracy of Custom KNN Model: {customaccuracy:.2f}%")
    print(f"Accuracy of Scikit-Learn KNN Model: {sklearnaccuracy:.2f}%")

if __name__ == "__main__":
    main()
