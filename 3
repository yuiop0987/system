from heapq import heappush, heappop

class Puzzle:
    def __init__(self, start, goal):
        self.start = start
        self.goal = goal
        self.n = len(start)
        self.moves = ((0, 1), (0, -1), (1, 0), (-1, 0))

    
    def h(self, state):
     return sum(state[i][j] != self.goal[i][j] for i in range(self.n) for j in range(self.n))


    def solve(self):
        open_list = [(self.h(self.start), 0, self.start)]
        closed = set()
        step_count = 0

        while open_list:
            _, g, current = heappop(open_list)
            step_count += 1  # Increment step counter before printing

            print("Step", step_count, ":")
            self.print_state(current)
            print()  # Add a newline after each step

            if current == self.goal:
                print("Goal reached.")
                return

            closed.add(tuple(map(tuple, current)))
            x, y = next((i, j) for i in range(self.n) for j in range(self.n) if current[i][j] == '_')
            for dx, dy in self.moves:
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.n and 0 <= ny < self.n:
                    next_state = [row[:] for row in current]
                    next_state[x][y], next_state[nx][ny] = next_state[nx][ny], '_'
                    if tuple(map(tuple, next_state)) not in closed:
                        heappush(open_list, (g + 1 + self.h(next_state), g + 1, next_state))

    def print_state(self, state):
        for row in state:
            print(" ".join(row))

start = [['1', '2', '3'],['_', '4', '6'],['7', '5', '8']]
goal = [['1', '2', '3'],['4', '5', '6'],['7', '8', '_']]
puzzle = Puzzle(start, goal)
puzzle.solve()
